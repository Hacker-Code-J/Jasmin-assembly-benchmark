param int KECCAK_ROUNDS=24;


u64[24] KECCAK1600_RC =
{  0x0000000000000001
  ,0x0000000000008082
  ,0x800000000000808a
  ,0x8000000080008000
  ,0x000000000000808b
  ,0x0000000080000001
  ,0x8000000080008081
  ,0x8000000000008009
  ,0x000000000000008a
  ,0x0000000000000088
  ,0x0000000080008009
  ,0x000000008000000a
  ,0x000000008000808b
  ,0x800000000000008b
  ,0x8000000000008089
  ,0x8000000000008003
  ,0x8000000000008002
  ,0x8000000000000080
  ,0x000000000000800a
  ,0x800000008000000a
  ,0x8000000080008081
  ,0x8000000000008080
  ,0x0000000080000001
  ,0x8000000080008008
};


inline fn __index_spec(inline int x y) -> inline int
{
  inline int r;
  r = (x % 5) + 5 * (y % 5);
  return r;
}


inline fn __keccak_rho_offsets_spec(inline int i) -> inline int
{
  inline int r x y z t;

  r = 0;
  x = 1;
  y = 0;

  for t = 0 to 24 {
    if (i == x + 5 * y) {
      r = ((t + 1) * (t + 2) / 2) % 64;
    }
    z = (2 * x + 3 * y) % 5;
    x = y;
    y = z;
  }

  return r;
}


inline fn __rhotates_spec(inline int x y) -> inline int
{
  inline int i r;
  i = __index_spec(x, y);
  r = __keccak_rho_offsets_spec(i);
  return r;
}


inline fn __theta_spec(stack u64[25] a) -> stack u64[25]
{
  inline int x y;
  reg u64[5] c d;

  for x = 0 to 5 {
    c[x] = 0;
    for y = 0 to 5 {
      c[x] ^= a[x + 5 * y];
    }
  }

  for x = 0 to 5 {
    d[x] = c[(x + 1) % 5];
    _, _, d[x] = #ROL_64(d[x], 1);
    d[x] ^= c[(x + 4) % 5];
  }

  for x = 0 to 5 {
    for y = 0 to 5 {
      a[x + 5 * y] ^= d[x];
    }
  }

  return a;
}


inline fn __rho_spec(stack u64[25] a) -> stack u64[25]
{
  inline int x y i z;

  for x = 0 to 5 {
    for y = 0 to 5 {
      i = __index_spec(x, y);
      z = __keccak_rho_offsets_spec(i);
      _, _, a[i] = #ROL_64(a[i], z);
    }
  }

  return a;
}


inline fn __pi_spec(stack u64[25] a) -> stack u64[25]
{
  inline int x y i;
  stack u64[25] b;
  reg u64 t;

  for i = 0 to 25
  { t = a[i]; b[i] = t; }

  for x = 0 to 5 {
    for y = 0 to 5 {
      t = b[x + 5 * y];
      i = __index_spec(y, 2 * x + 3 * y);
      a[i] = t;
    }
  }
  return a;
}


inline fn __chi_spec(stack u64[25] a) -> stack u64[25]
{
  inline int x y i;
  reg u64[5] c;

  for y = 0 to 5 {
    for x = 0 to 5 {
      i = __index_spec(x + 1, y);
      c[x] = a[i];
      c[x] = !c[x];
      i = __index_spec(x + 2, y);
      c[x] &= a[i];
      i = __index_spec(x, y);
      c[x] ^= a[i];
    }
    for x = 0 to 5 {
      a[x + 5 * y] = c[x];
    }
  }
  return a;
}


inline fn __iota_spec(stack u64[25] a, reg u64 c) -> stack u64[25]
{
  a[0] ^= c;
  return a;
}


inline fn __keccakP1600_round_spec(stack u64[25] state, reg u64 c) -> stack u64[25]
{
  state = __theta_spec(state);
  state = __rho_spec(state);
  state = __pi_spec(state);
  state = __chi_spec(state);
  state = __iota_spec(state, c);
  return state;
}


inline fn __keccakf1600_spec(stack u64[25] state) -> stack u64[25]
{
  reg u64 round RC;
  reg ptr u64[24] kRCp;

  kRCp = KECCAK1600_RC;
  round = 0;
  while(round < 24)
  {
    RC = kRCp[(int) round];
    state = __keccakP1600_round_spec(state, RC);
    round += 1;
  }

  return state;
}



// C[x] = A[x,0] ^ A[x,1] ^ A[x,2] ^ A[x,3] ^ A[x,4]
inline fn __theta_sum_ref(stack u64[25] a) -> reg u64[5]
{
  inline int x y;
  reg u64[5] c;

  // C[x] = A[x, 0]
  for x=0 to 5
  { c[x] = a[x + 0]; }

  // C[x] ^= A[x,1] ^ A[x,2] ^ A[x,3] ^ A[x,4]
  for y=1 to 5
  { for x=0 to 5
    { c[x] ^= a[x + y*5]; }
  }

  return c;
}


// D[x] = C[x-1] ^ ROT(C[x+1], 1) 
inline fn __theta_rol_ref(reg u64[5] c) -> reg u64[5]
{
  inline int x;
  reg u64[5] d;

  for x = 0 to 5
  { // D[x] = C[x + 1]
    d[x] = c[(x + 1) % 5];

    // D[x] = ROT(D[x], 1)
    _, _, d[x] = #ROL_64(d[x], 1);

    // D[x] ^= C[x-1]
    d[x] ^= c[(x - 1 + 5) % 5];
  }

  return d;
}


// B[x] = ROT( (A[x',y'] ^ D[x']), r[x',y'] ) with (x',y') = M^-1 (x,y)
//
// M = (0 1)  M^-1 = (1 3)  x' = 1x + 3y
//     (2 3)         (1 0)  y' = 1x + 0y
//
inline fn __rol_sum_ref(
  stack u64[25] a,
  reg u64[5] d,
  inline int y
) -> reg u64[5]
{
  inline int r x x_ y_;
  reg u64[5] b;

  for x = 0 to 5
  {
    x_ = (x + 3*y) % 5;
    y_ = x;
    r = __rhotates_spec(x_, y_);

    // B[x] = A[x',y']
    b[x] = a[x_ + y_*5];

    // B[x] ^= D[x'];
    b[x] ^= d[x_];

    // B[x] = ROT( B[x], r[x',y'] );
    if(r != 0)
    { _, _, b[x] = #ROL_64(b[x], r); }

  }

  return b;
}


// E[x, y] = B[x] ^ ( (!B[x+1]) & B[x+2] )
// -- when x and y are 0: E[0,0] ^= RC[i];
inline fn __set_row_ref(
  stack u64[25] e,
  reg u64[5] b,
  inline int y,
  reg u64 rc
) -> stack u64[25]
{
  inline int x x1 x2;
  reg u64 t;

  for x=0 to 5
  { 
    x1 = (x + 1) % 5;
    x2 = (x + 2) % 5;

    //t  = !b[x1] & b[x2];
    t = b[x1]; t = !t; t &= b[x2];

    t ^= b[x];
    if( x==0 && y==0 ){ t ^= rc; }
    e[x + y*5] = t;
  }

  return e;
}


inline fn __round_ref(stack u64[25] a, reg u64 rc) -> stack u64[25]
{
  inline int y;
  reg u64[5] b c d;
  stack u64[25] e;

  c = __theta_sum_ref(a);
  d = __theta_rol_ref(c);

  for y = 0 to 5
  { b = __rol_sum_ref(a, d, y);
    e = __set_row_ref(e, b, y, rc);
  }

  return e;
}


inline fn __keccakf1600_ref(stack u64[25] a) -> stack u64[25]
{
  reg ptr u64[24] RC;
  stack u64[25] e;
  reg u64 c rc;

  RC = KECCAK1600_RC;

  c = 0;
  while (c < KECCAK_ROUNDS - 1)
  {
    rc = RC[(int) c];
    e = __round_ref(a, rc);

    rc = RC[(int) c + 1];
    a = __round_ref(e, rc);

    c += 2;
  }

  return a;
}




inline fn __keccak_init_ref() -> stack u64[25]
{
  stack u64[25] state;
  reg u64 t;
  inline int i;

  ?{}, t = #set0();
  for i = 0 to 25
  { state[i] = t;
  }

  return state;
}

inline fn __add_full_block_ref(
  stack u64[25] state,
  reg u64 in inlen,
  reg u64 rate
) -> stack u64[25], reg u64, reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while( i < rate64)
  {
    t = [in + 8*i];
    state[(int)i] ^= t;
    i+=1;
  }

  in += rate;
  inlen -= rate;

  return state, in, inlen;
}


// obs: @pre: inlen < rate_in_bytes
inline fn __add_final_block_ref(
  stack u64[25] state,
  reg   u64 in inlen,
  reg   u8  trail_byte,
  reg   u64 rate
) -> stack u64[25]
{
  reg u64 i t inlen8;
  reg u8 c;

  inlen8 = inlen;
  inlen8 >>= 3;
  i = 0;
  while ( i < inlen8 )
  {
    t = [in + 8*i];
    state[(int)i] ^= t;
    i += 1;
  }

  i <<= 3;
  while ( i < inlen )
  {
    c = (u8)[in + i];
    state[u8 (int)i] ^= c;
    i += 1;
  }

  state[u8 (int)i] ^= trail_byte;

  i = rate;
  i -= 1;
  state[u8 (int)i] ^= 0x80;

  return state;
}


inline fn __absorb_ref(
  stack u64[25] state,
  reg   u64 in inlen,
  stack u8  s_trail_byte,
  reg   u64 rate // rate already in bytes -- it is returned bc of spills
) -> stack u64[25], reg u64
{
  stack u64 s_in s_inlen s_rate;
  reg u8 trail_byte;

  // intermediate blocks
  while ( inlen >= rate )
  {
    state, in, inlen = __add_full_block_ref(state, in, inlen, rate);
    s_in = in;
    s_inlen = inlen; 
    s_rate = rate;

    state = __keccakf1600_ref(state);
    in = s_in;
    inlen = s_inlen;
    rate = s_rate;
  }

  // final block
  trail_byte = s_trail_byte;

  state = __add_final_block_ref(state, in, inlen, trail_byte, rate);

  return state, rate;
}


inline fn __xtr_full_block_ref(
  stack u64[25] state,
  reg u64 out outlen,
  reg u64 rate
) -> reg u64, reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while ( i < rate64 )
  {
    t = state[(int)i];
    [out + 8*i] = t;
    i += 1;
  }

  out += rate;
  outlen -= rate;

  return out, outlen;
}


inline fn __xtr_bytes_ref(
  stack u64[25] state,
  reg u64 out outlen
) -> reg u64
{
  reg u64 i t outlen8;
  reg u8 c;

  outlen8 = outlen;
  outlen8 >>= 3;
  i = 0;
  while ( i < outlen8 )
  {
    t = state[(int)i];
    [out + 8*i] = t;
    i += 1;
  }
  i <<= 3;

  while ( i < outlen )
  {
    c = state[u8 (int)i];
    (u8)[out + i] = c;
    i += 1;
  }

  out += outlen;
  return out;
}


inline fn __squeeze_ref(
  stack u64[25] state,
  stack u64 s_out,
  reg   u64 outlen,
  reg   u64 rate
)
{
  reg u64 out;
  stack u64 s_outlen s_rate;

  // intermediate blocks
  while ( outlen > rate )
  {
    s_outlen = outlen;
    s_rate = rate;
    state = __keccakf1600_ref(state);
    out = s_out;
    outlen = s_outlen;
    rate = s_rate;

    out, outlen = __xtr_full_block_ref(state, out, outlen, rate);
    s_out = out;
  }

  s_outlen = outlen;
  state = __keccakf1600_ref(state);
  out = s_out;
  outlen = s_outlen;

  out = __xtr_bytes_ref(state, out, outlen);
}


inline fn __keccak1600_ref(reg u64 out outlen in inlen, reg u8 trail_byte, reg u64 rate)
{
  stack u64[25] state;
  stack u64 s_out s_outlen;
  stack u8 s_trail_byte;

  s_out = out;
  s_outlen = outlen;
  s_trail_byte = trail_byte;

  state = __keccak_init_ref();

  // absorb
  state, rate = __absorb_ref(state, in, inlen, s_trail_byte, rate);

  // squeeze
  outlen = s_outlen;
  __squeeze_ref(state, s_out, outlen, rate);
}


export fn _keccak1600_ref(reg u64 out outlen in inlen, reg u8 trail_byte, reg u64 rate)
{
  __keccak1600_ref(out, outlen, in, inlen, trail_byte, rate);
}

inline fn __sha3_256_ref(reg u64 out in inlen)
{
  reg u64 outlen rate;
  reg u8 trail_byte;

  outlen = (256/8);
  trail_byte = 0x6;
  rate = (1088/8);

  _keccak1600_ref(out, outlen, in, inlen, trail_byte, rate);
}



export fn jade_hash_sha3_256_amd64(reg u64 hash input input_length) -> reg u64
{
  reg u64 r;
  __sha3_256_ref(hash, input, input_length);
  ?{}, r = #set0();
  return r;
}


